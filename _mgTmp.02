   (1) % MotionGenesis file:  Main.txt
   (2) %--------------------------------------------------------------------
   (3) %   Physical objects.
   (4) NewtonianFrame  N                                   % The atmosphere
   (5) RigidBody       Plane                               % Where Z is the longitudinal axis
   (6) RigidFrame       Stab
   (7) Particle        Pilot                               % 
   (8) Point           wing( Plane )           % Center of lift on the left wing
   (9) %Point           stab( Plane )        % Center of lift on the horizontal stabilizer
   (10) %--------------------------------------------------------------------
   (11) %   Mathematical declarations.
   (12) Variable    x'', y''                            % The plane's positional coordinates and their derivatives
   (13) Variable    alpha''                             % Main wing angle of attack
   (14) Constant    g = 9.80665 m/s^2                   % Earth's gravitational acceleration.
   (15) Constant    Density = 1.225 kg / m^3            % Standard atmosphere Density
   (16) Constant    Thrust  = 10000 N                   % Thrust from engine. Engine torque is neglected
   (17) %Constant    Drag_profile =                     % Profile drag, applied at the plane's CM, opposite it's velocity vector
   (18) Constant    x_wing = 1 m, y_wing = 0 m
   (19) Constant    x_stab = -100 m, y_stab = 0 m
   (20) Constant    S_wing= 100 m^2, S_stab= 0 m^2
   (21) Constant deflection = -0 degrees
   (22) Planecm.Translate(No, x*Nx> + y*Ny>)
-> (23) p_No_Planecm> = x*Nx> + y*Ny>
-> (24) v_Planecm_N> = x'*Nx> + y'*Ny>
-> (25) a_Planecm_N> = x''*Nx> + y''*Ny>

   (26) Stabo.SetPosition(Planecm, x_stab*Planex> + y_stab*Planey>)
-> (27) p_Planecm_Stabo> = x_stab*Planex> + y_stab*Planey>

   (28) Plane.RotateZ(N, alpha)
-> (29) Plane_N = [cos(alpha), sin(alpha), 0;  -sin(alpha), cos(alpha), 0;  0, 0, 1]
-> (30) w_Plane_N> = alpha'*Planez>
-> (31) alf_Plane_N> = alpha''*Planez>

   (32) Stab.RotateZ(Plane, deflection)
-> (33) Stab_Plane = [cos(deflection), sin(deflection), 0;  -sin(deflection), 
        cos(deflection), 0;  0, 0, 1]
-> (34) w_Stab_Plane> = 0>
-> (35) w_Stab_N> = alpha'*Planez>
-> (36) alf_Stab_Plane> = 0>
-> (37) alf_Stab_N> = alpha''*Planez>

   (38) Stab.SetAngularVelocity(Plane, 0>)
-> (39) w_Stab_Plane> = 0>

   (40) wing.SetPosition(Planecm, x_wing*Planex> + y_wing*Planey>)
-> (41) p_Planecm_wing> = x_wing*Planex> + y_wing*Planey>

   (42) %stab.SetPosition(Planeo,  x_stab*Planex> + y_stab*Planey>)
   (43) %theta=GetAngleBetweenVectorsDegrees(Planex>, Ny>) %Used to define the sign of alpha
   (44) %alpha= (IsNegative(90-theta)*(-1)+IsPositive(90-theta)) * GetAngleBetweenVectors(Planex>, Planecm.Getvelocity(N))
   (45) alpha_stab= alpha + deflection
-> (46) alpha_stab = deflection + alpha

   (47) %====================================
   (48) %Redifine from Xfoil polars
   (49) Cl_wing= IsPositive(90-alpha)*2*sin(alpha)*cos(alpha) %From Morris
-> (50) Cl_wing = 2*sin(alpha)*cos(alpha)*IsPositive(90-alpha)

   (51) Cl_stab= IsPositive(90-alpha)*2*sin(alpha_stab)*cos(alpha_stab) %From Morris
-> (52) Cl_stab = 2*IsPositive(90-alpha)*sin(alpha_stab)*cos(alpha_stab)

   (53) Cd_wing = 2*sin(alpha)^2 %From Morris
-> (54) Cd_wing = 2*sin(alpha)^2

   (55) Cd_stab = 2*sin(alpha_stab)^2 %From Morris
-> (56) Cd_stab = 2*sin(alpha_stab)^2

   (57) %===========================================
   (58) Lift_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (59) Lift_wing = 0.5*Density*S_wing*Cl_wing*(x'^2+y'^2)

   (60) Lift_stab = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (61) Lift_stab = 0.5*Density*S_stab*Cl_wing*(x'^2+y'^2)

   (62) Drag_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (63) Drag_wing = 0.5*Density*S_wing*Cl_wing*(x'^2+y'^2)

   (64) Drag_stab = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (65) Drag_stab = 0.5*Density*S_stab*Cl_wing*(x'^2+y'^2)

   (66) Constant r = 2 m
   (67) Constant h = 10 m
   (68) %   Mass and inertia properties.
   (69) Plane.SetMass( mPlane = 2300 lbm)
   (70) Pilot.SetMass( mPilot = 100 lbm)
   (71) Plane.SetInertia( Planecm,  IPlanexx = (mPlane*(3*r^2+h^2)/12),  IPlaneyy = (mPlane*(3*r^2+h^2)/12) ,  IPlanezz = 0.5*mPlane*r^2 ) %What approximations should we make?
-> (72) IPlanexx = 0.08333333*mPlane*(h^2+3*r^2)
-> (73) IPlaneyy = 0.08333333*mPlane*(h^2+3*r^2)
-> (74) IPlanezz = 0.5*mPlane*r^2

   (75) %   Add relevant contact/distance forces.
   (76) System.AddForceGravity( -g*Ny> )            % Adds gravity force to each massive object.
-> (77) Force_Pilot> = -mPilot*g*Ny>
-> (78) Force_Planecm> = -mPlane*g*Ny>

   (79) %Lift
   (80) wing.AddForce(Lift_wing*Planey>)
-> (81) Force_wing> = Lift_wing*Planey>

   (82) Stabo.AddForce(Lift_stab*Staby>)
-> (83) Force_Stabo> = Lift_stab*Staby>

   (84) %Drag
   (85) %wing.Addforce(-Drag_wing*Planex>)
   (86) %Stabo.Addforce(-Drag_stab*Stabx>) -GetUnitvector(Planecm.GetVelocity(N))
   (87) wing.Addforce(-Drag_wing*GetUnitvector(Planecm.GetVelocity(N)))
-> (88) Force_wing> = -x'*Drag_wing/sqrt(x'^2+y'^2)*Nx> - y'*Drag_wing/sqrt(x'^2
        +y'^2)*Ny> + Lift_wing*Planey>

   (89) Stabo.Addforce(-Drag_stab*GetUnitvector(Planecm.GetVelocity(N)))
-> (90) Force_Stabo> = -x'*Drag_stab/sqrt(x'^2+y'^2)*Nx> - y'*Drag_stab/sqrt(x'^2
        +y'^2)*Ny> + Lift_stab*Staby>

   (91) %Thrust
   (92) Planecm.AddForce(Thrust*Planex>)
-> (93) Force_Planecm> = -mPlane*g*Ny> + Thrust*Planex>

   (94) Dynamics[1] = Dot(  Plane.GetDynamics(),  Nx>  )
-> (95) Dynamics[1] = sin(alpha)*Lift_wing + x'*Drag_wing/sqrt(x'^2+y'^2)
        + mPlane*x'' - Thrust*cos(alpha)

   (96) Dynamics[2] = Dot(  Plane.GetDynamics(),  Ny>  )
-> (97) Dynamics[2] = mPlane*g + y'*Drag_wing/sqrt(x'^2+y'^2) + mPlane*y''
        - Thrust*sin(alpha) - cos(alpha)*Lift_wing

   (98) Dynamics[3] = Dot(  Plane.GetDynamics( Planecm ),  Nz>  )
-> (99) Dynamics[3] = (x_wing*cos(alpha)*y'-x_wing*sin(alpha)*x'-y_wing*sin(al
        pha)*y'-y_wing*cos(alpha)*x')*Drag_wing/sqrt(x'^2+y'^2) + IPlanezz*alpha''
        - x_wing*Lift_wing

   (100) Solve(Dynamics, x'', y'', alpha'')
-> (101) x'' = (Thrust*cos(alpha)-sin(alpha)*Lift_wing-x'*Drag_wing/sqrt(x'^2+y'^2))
         /mPlane
-> (102) y'' = (Thrust*sin(alpha)+cos(alpha)*Lift_wing-y'*Drag_wing/sqrt(x'^2+y'^2))
         /mPlane - g
-> (103) alpha'' = (x_wing*Lift_wing-(x_wing*cos(alpha)*y'-x_wing*sin(alpha)*
         x'-y_wing*sin(alpha)*y'-y_wing*cos(alpha)*x')*Drag_wing/sqrt(x'^2+y'^2))
         /IPlanezz

   (104) Input alpha = 7 degrees, alpha'=0
   (105) Input x=0 m, y=1000 m, x'=100 m/s, y'=0 m/s, tfinal = 10, tstep= 0.02 sec
   (106) Output      t sec,  x m, y m, Lift_wing N, Lift_stab N, alpha degrees
   (107) OutputPlot  x m, y m
   (108) OutputPlot  y m, alpha degrees, alpha_stab degrees
   (109) ODE()

   (110) clear
ab N, alpha degrees
