% MotionGenesis file:  Main.txt

%--------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  N                                   % The atmosphere
RigidBody       Plane                               % Where Z is the longitudinal axis
RigidFrame       Stab
Particle        Pilot                               % 
Point           wing( Plane )           % Center of lift on the left wing
%Point           stab( Plane )        % Center of lift on the horizontal stabilizer

%--------------------------------------------------------------------
%   Mathematical declarations.
Variable    x'', y''                            % The plane's positional coordinates and their derivatives
Variable    alpha''                             % Main wing angle of attack
Constant    g = 9.80665 m/s^2                   % Earth's gravitational acceleration.
Constant    Density = 1.225 kg / m^3            % Standard atmosphere Density
Constant    Thrust  = 10000 N                   % Thrust from engine. Engine torque is neglected
%Constant    Drag_profile =                     % Profile drag, applied at the plane's CM, opposite it's velocity vector
Constant    x_wing = 1 m, y_wing = 0 m
Constant    x_stab = -1 m, y_stab = 0 m
Constant    S_wing= 10 m^2, S_stab= 10 m^2

Constant deflection = -0 degrees

Planecm.Translate(No, x*Nx> + y*Ny>)
Stabo.SetPosition(Planecm, x_stab*Planex> + y_stab*Planey>)
Plane.RotateZ(N, alpha)
Stab.RotateZ(Plane, deflection)
Stab.SetAngularVelocity(Plane, 0>)

wing.SetPosition(Planecm, x_wing*Planex> + y_wing*Planey>)
%stab.SetPosition(Planeo,  x_stab*Planex> + y_stab*Planey>)

theta=GetAngleBetweenVectorsDegrees(Planex>, Ny>) %Used to define the sign of alpha

%alpha= (IsNegative(90-theta)*(-1)+IsPositive(90-theta)) * GetAngleBetweenVectors(Planex>, Planecm.Getvelocity(N))
alpha_stab= alpha + deflection

Cl_wing= 2*sin(alpha)*cos(alpha) %From Morris
Cl_stab= 2*sin(alpha_stab)*cos(alpha_stab) %From Morris

Cd_wing = 2*sin(alpha)^2 %From Morris
Cd_stab = 2*sin(alpha_stab)^2 %From Morris

Lift_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
Lift_stab = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
Drag_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
Drag_stab = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab

Constant r = 2 m
Constant h = 10 m

%   Mass and inertia properties.
Plane.SetMass( mPlane = 2300 lbm)
Pilot.SetMass( mPilot = 100 lbm)
Plane.SetInertia( Planecm,  IPlanexx = (mPlane*(3*r^2+h^2)/12),  IPlaneyy = (mPlane*(3*r^2+h^2)/12) ,  IPlanezz = 0.5*mPlane*r^2 ) %What approximations should we make?

%   Add relevant contact/distance forces.

System.AddForceGravity( -g*Ny> )            % Adds gravity force to each massive object.

%Lift
wing.AddForce(Lift_wing*Planey>)
Stabo.AddForce(Lift_stab*Staby>)
%Drag
wing.Addforce(-Drag_wing*Planex>)
Stabo.Addforce(-Drag_stab*Stabx>)
%Thrust
Planecm.AddForce(Thrust*Planex>)


Dynamics[1] = Dot(  Plane.GetDynamics(),  Nx>  )
Dynamics[2] = Dot(  Plane.GetDynamics(),  Ny>  )
Dynamics[3] = Dot(  Plane.GetDynamics( Planecm ),  Nz>  )
Solve(Dynamics, x'', y'', alpha'')


Input alpha = 3 degrees, alpha'=0
Input x=0 m, y=1000 m, x'=100 m/s, y'=0 m/s, tfinal = 100, tstep= 0.02 sec

Output      t sec,  x m, y m, Lift_wing N, Lift_stab N, alpha degrees
OutputPlot  x m, y m
OutputPlot  y m, alpha degrees, alpha_stab degrees

ODE()

Save MGplane.html


