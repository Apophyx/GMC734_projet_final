   (1) % MotionGenesis file:  Main.txt
   (2) %--------------------------------------------------------------------
   (3) %   Physical objects.
   (4) NewtonianFrame  N                                   % The atmosphere
   (5) RigidBody       Plane                               % Where Z is the longitudinal axis
   (6) RigidFrame      Stab
   (7) Particle        Pilot                               % 
   (8) Point           wing( Plane )           % Center of lift on the left wing
   (9) Point           stabpoint( Plane )        % Center of lift on the horizontal stabilizer
   (10) %--------------------------------------------------------------------
   (11) %   Mathematical declarations.
   (12) Variable    x'', y''                            % The plane's positional coordinates and their derivatives
   (13) Variable    qa''                             % Main wing angle of attack
   (14) Constant    g = 9.80665 m/s^2                   % Earth's gravitational acceleration.
   (15) Constant    Density = 1.225 kg / m^3            % Standard atmosphere Density
   (16) Constant    S_wing  = 16.2 m^2, S_stab  = 3.96 m^2
   (17) Constant    x_wing  = 0.25 m, y_wing  = 1 m
   (18) Constant    x_stab  = -4.24 m, y_stab  = 0.5 m
   (19) Constant    efficiency=0.735 noUnits, power_a=116.6 kiloWatt
   (20) Constant    deflection = -5 degrees
   (21) Planecm.Translate(No, x*Nx> + y*Ny>)
-> (22) p_No_Planecm> = x*Nx> + y*Ny>
-> (23) v_Planecm_N> = x'*Nx> + y'*Ny>
-> (24) a_Planecm_N> = x''*Nx> + y''*Ny>

   (25) Plane.RotateZ(N, qa)
-> (26) Plane_N = [cos(qa), sin(qa), 0;  -sin(qa), cos(qa), 0;  0, 0, 1]
-> (27) w_Plane_N> = qa'*Planez>
-> (28) alf_Plane_N> = qa''*Planez>

   (29) stabpoint.Translate(Planecm, x_stab *Planex> + y_stab *Planey>)
-> (30) p_Planecm_stabpoint> = x_stab*Planex> + y_stab*Planey>
-> (31) v_stabpoint_N> = x'*Nx> + y'*Ny> - y_stab*qa'*Planex> + x_stab*qa'*Planey>
-> (32) a_stabpoint_N> = x''*Nx> + y''*Ny> + (-x_stab*qa'^2-y_stab*qa'')*Planex>
        + (x_stab*qa''-y_stab*qa'^2)*Planey>

   (33) Stab.RotateZ(Plane, deflection)
-> (34) Stab_Plane = [cos(deflection), sin(deflection), 0;  -sin(deflection), 
        cos(deflection), 0;  0, 0, 1]
-> (35) w_Stab_Plane> = 0>
-> (36) w_Stab_N> = qa'*Planez>
-> (37) alf_Stab_Plane> = 0>
-> (38) alf_Stab_N> = qa''*Planez>

   (39) wing.Translate(Planecm, x_wing *Planex> + y_wing *Planey>)
-> (40) p_Planecm_wing> = x_wing*Planex> + y_wing*Planey>
-> (41) v_wing_N> = x'*Nx> + y'*Ny> - y_wing*qa'*Planex> + x_wing*qa'*Planey>
-> (42) a_wing_N> = x''*Nx> + y''*Ny> + (-x_wing*qa'^2-y_wing*qa'')*Planex>
        + (x_wing*qa''-y_wing*qa'^2)*Planey>

   (43) alpha=GetAngleBetweenVectors(Planecm.Getvelocity(N), Planex>, Nz>)
-> (44) alpha = sign0IsPositive1(sin(qa)*x'-cos(qa)*y')*acos((sin(qa)*y'+cos(
        qa)*x')/sqrt(x'^2+y'^2))

   (45) alpha_stab= alpha + deflection
-> (46) alpha_stab = deflection + alpha

   (47) %Aerodynamic coefficients====================================
   (48) Cl_wing= IsPositive(50-alpha)*2*sin(alpha)*cos(alpha) %From Morris
-> (49) Cl_wing = 2*sin(alpha)*cos(alpha)*IsPositive(50-alpha)

   (50) Cl_stab= IsPositive(50-alpha)*2*sin(alpha_stab)*cos(alpha_stab) %From Morris
-> (51) Cl_stab = 2*sin(alpha_stab)*cos(alpha_stab)*IsPositive(50-alpha)

   (52) Cd_wing = 2*sin(alpha)^2 %From Morris
-> (53) Cd_wing = 2*sin(alpha)^2

   (54) Cd_stab = 2*sin(alpha_stab)^2 %From Morris
-> (55) Cd_stab = 2*sin(alpha_stab)^2

   (56) %Aerodynamique forces===========================================
   (57) Lift_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (58) Lift_wing = 0.5*Density*S_wing*(x'^2+y'^2)*Cl_wing

   (59) Lift_stab = 0.5*Density*Cl_stab*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (60) Lift_stab = 0.5*Density*S_stab*(x'^2+y'^2)*Cl_stab

   (61) Drag_wing = 0.5*Density*Cd_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (62) Drag_wing = 0.5*Density*S_wing*(x'^2+y'^2)*Cd_wing

   (63) Drag_stab = 0.5*Density*Cd_stab*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (64) Drag_stab = 0.5*Density*S_stab*(x'^2+y'^2)*Cd_stab

   (65) %Mass and inertia properties===========================================
   (66) Constant r = 2 m
   (67) Constant h = 10 m
   (68) Plane.SetMass( mPlane = 779 kg)
   (69) Pilot.SetMass( mPilot = 100 lbm)
   (70) Plane.SetInertia( Planecm,  IPlanexx = (mPlane*(3*r^2+h^2)/12),  IPlaneyy = (mPlane*(3*r^2+h^2)/12) ,  IPlanezz = 0.5*mPlane*r^2 ) %What approximations should we make?
-> (71) IPlanexx = 0.08333333*mPlane*(h^2+3*r^2)
-> (72) IPlaneyy = 0.08333333*mPlane*(h^2+3*r^2)
-> (73) IPlanezz = 0.5*mPlane*r^2

   (74) %Relevant contact/distance forces===========================================
   (75) %Gravity-----
   (76) System.AddForceGravity( -g*Ny> )
-> (77) Force_Pilot> = -mPilot*g*Ny>
-> (78) Force_Planecm> = -mPlane*g*Ny>

   (79) %Lift-----
   (80) wing.AddForce(Lift_wing*cross(GetUnitvector(Planecm.GetVelocity(N)), -Nz> ))
-> (81) Force_wing> = -y'*Lift_wing/sqrt(x'^2+y'^2)*Nx> + x'*Lift_wing/sqrt(x'^2
        +y'^2)*Ny>

   (82) stabpoint.AddForce(Lift_stab*cross(GetUnitvector(Planecm.GetVelocity(N)), -Nz> ))
-> (83) Force_stabpoint> = -y'*Lift_stab/sqrt(x'^2+y'^2)*Nx> + x'*Lift_stab/sq
        rt(x'^2+y'^2)*Ny>

   (84) %Drag----
   (85) wing.Addforce(-Drag_wing*GetUnitvector(Planecm.GetVelocity(N)))
-> (86) Force_wing> = -(x'*Drag_wing+y'*Lift_wing)/sqrt(x'^2+y'^2)*Nx> + (x'*
        Lift_wing-y'*Drag_wing)/sqrt(x'^2+y'^2)*Ny>

   (87) stabpoint.Addforce(-Drag_stab*GetUnitvector(Planecm.GetVelocity(N)))
-> (88) Force_stabpoint> = -(x'*Drag_stab+y'*Lift_stab)/sqrt(x'^2+y'^2)*Nx>
        + (x'*Lift_stab-y'*Drag_stab)/sqrt(x'^2+y'^2)*Ny>

   (89) %Thrust-----
   (90) Planecm.AddForce((efficiency*power_a/(64))*Planex>) % 64 m/s = 120 kts
-> (91) Force_Planecm> = -mPlane*g*Ny> + 0.015625*efficiency*power_a*Planex>

   (92) %Solving dynamics==============================================================
   (93) Dynamics[1] = Dot(  Plane.GetDynamics(),  Nx>  )
-> (94) Dynamics[1] = (x'*Drag_stab+x'*Drag_wing+y'*Lift_stab+y'*Lift_wing)/sq
        rt(x'^2+y'^2) + mPlane*x'' - 0.015625*efficiency*power_a*cos(qa)

   (95) Dynamics[2] = Dot(  Plane.GetDynamics(),  Ny>  )
-> (96) Dynamics[2] = mPlane*g + mPlane*y'' - 0.015625*efficiency*power_a*sin(qa)
        - (x'*Lift_stab+x'*Lift_wing-y'*Drag_stab-y'*Drag_wing)/sqrt(x'^2+y'^2)

   (97) Dynamics[3] = Dot(  Plane.GetDynamics( Planecm ),  Nz>  )
-> (98) Dynamics[3] = IPlanezz*qa'' - (x_stab*(sin(qa)*(x'*Drag_stab+y'*Lift_s
        tab)+cos(qa)*(x'*Lift_stab-y'*Drag_stab))+x_wing*(sin(qa)*(x'*Drag_wing
        +y'*Lift_wing)+cos(qa)*(x'*Lift_wing-y'*Drag_wing))+y_stab*(cos(qa)*(
        x'*Drag_stab+y'*Lift_stab)-sin(qa)*(x'*Lift_stab-y'*Drag_stab))+y_wing*
        (cos(qa)*(x'*Drag_wing+y'*Lift_wing)-sin(qa)*(x'*Lift_wing-y'*Drag_wing)))
        /sqrt(x'^2+y'^2)

   (99) Solve(Dynamics, x'', y'', qa'')
-> (100) x'' = 0.015625*(efficiency*power_a*cos(qa)-64*(x'*Drag_stab+x'*Drag_w
         ing+y'*Lift_stab+y'*Lift_wing)/sqrt(x'^2+y'^2))/mPlane

-> (101) y'' = 0.015625*(efficiency*power_a*sin(qa)+64*(x'*Lift_stab+x'*Lift_w
         ing-y'*Drag_stab-y'*Drag_wing)/sqrt(x'^2+y'^2))/mPlane - g

-> (102) qa'' = (x_stab*(sin(qa)*(x'*Drag_stab+y'*Lift_stab)+cos(qa)*(x'*Lift_
         stab-y'*Drag_stab))+x_wing*(sin(qa)*(x'*Drag_wing+y'*Lift_wing)+cos(
         qa)*(x'*Lift_wing-y'*Drag_wing))+y_stab*(cos(qa)*(x'*Drag_stab+y'*Lif
         t_stab)-sin(qa)*(x'*Lift_stab-y'*Drag_stab))+y_wing*(cos(qa)*(x'*Drag
         _wing+y'*Lift_wing)-sin(qa)*(x'*Lift_wing-y'*Drag_wing)))/(IPlanezz*
         sqrt(x'^2+y'^2))

   (103) stab_w = getmagnitude(Stab.getangularvelocity(Plane)) %check that it is 0
-> (104) stab_w = 0

   (105) Input qa = 0 degrees, qa'=0
   (106) Input x=0 m, y=1000 m, x'= 100 m/s, y'=0 m/s, tfinal = 10, tstep= 0.02 sec
   (107) Output      t sec,  x m, y m, qa degrees, alpha degrees, stab_w degrees/sec
   (108) OutputPlot  x m, y m
   (109) OutputPlot  t sec, alpha degrees, alpha_stab degrees
   (110) %OutputPlot  t sec, Lift_wing, Lift_stab
   (111) %OutputPlot  t sec, qa'', qa', qa
   (112) 
