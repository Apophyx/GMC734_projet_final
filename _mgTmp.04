   (1) % MotionGenesis file:  Main.txt
   (2) %--------------------------------------------------------------------
   (3) %   Physical objects.
   (4) NewtonianFrame  N                                   % The atmosphere
   (5) RigidBody       Plane                               % Where Z is the longitudinal axis
   (6) Particle        Pilot                               % 
   (7) Point           wing( Plane )           % Center of lift on the left wing
   (8) Point           stab( Plane )        % Center of lift on the horizontal stabilizer
   (9) %--------------------------------------------------------------------
   (10) %   Mathematical declarations.
   (11) Variable    x'', y''                 % The plane's positional coordinates and their derivatives
   (12) Constant    g = 9.80665 m/s^2            % Earth's gravitational acceleration.
   (13) Constant    Density = 1.225 kg / m^3      % Standard atmosphere Density
   (14) Constant    Thrust  = 1000 N                 % Thrust from engine. Engine torque is neglected
   (15) %Constant    Drag_profile =               % Profile drag, applied at the plane's CM, opposite it's velocity vector
   (16) Constant    x_wing = 1 m, y_wing = 0 m
   (17) Constant    x_stab = -2 m, y_stab = 0 m
   (18) Constant    S_wing= 20 m^2, S_stab= 10 m^2
   (19) Constant    alpha0 = 5 degrees
   (20) Planecm.Translate(No, x*Nx> + y*Ny>)
-> (21) p_No_Planecm> = x*Nx> + y*Ny>
-> (22) v_Planecm_N> = x'*Nx> + y'*Ny>
-> (23) a_Planecm_N> = x''*Nx> + y''*Ny>

   (24) Plane.RotateZ(N, alpha0)
-> (25) Plane_N = [cos(alpha0), sin(alpha0), 0;  -sin(alpha0), cos(alpha0), 0;  
        0, 0, 1]
-> (26) w_Plane_N> = 0>
-> (27) alf_Plane_N> = 0>

   (28) wing.SetPosition(Planeo, x_wing*Planex> + y_wing*Planey>)
-> (29) p_Planeo_wing> = x_wing*Planex> + y_wing*Planey>

   (30) stab.SetPosition(Planeo,  x_stab*Planex> + y_stab*Planey>)
-> (31) p_Planeo_stab> = x_stab*Planex> + y_stab*Planey>

   (32) Constant deflection = - 10 degrees
   (33) theta=GetAngleBetweenVectorsDegrees(Planex>, Ny>) %Used to define the sign of alpha
-> (34) theta = 57.29578*acos(sin(alpha0))

   (35) alpha_wing= (IsNegative(90-theta)*(-1)+IsPositive(90-theta)) * GetAngleBetweenVectorsDegrees(Planex>, Planecm.Getvelocity(N))
-> (36) alpha_wing = -57.29578*(IsNegative(90-theta)-IsPositive(90-theta))*acos
        ((sin(alpha0)*y'+cos(alpha0)*x')/sqrt(x'^2+y'^2))

   (37) alpha_stab= alpha_wing + deflection
-> (38) alpha_stab = deflection + alpha_wing

   (39) Cl_wing= 2*sin(alpha_wing)*cos(alpha_wing) %From Morris
-> (40) Cl_wing = 2*sin(alpha_wing)*cos(alpha_wing)

   (41) Cl_stab= 2*sin(alpha_stab)*cos(alpha_stab) %From Morris
-> (42) Cl_stab = 2*sin(alpha_stab)*cos(alpha_stab)

   (43) Cd_wing = 2*sin(alpha_wing)^2 %From Morris
-> (44) Cd_wing = 2*sin(alpha_wing)^2

   (45) Cd_stab = 2*sin(alpha_stab)^2 %From Morris
-> (46) Cd_stab = 2*sin(alpha_stab)^2

   (47) Lift_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (48) Lift_wing = 0.5*Density*S_wing*(x'^2+y'^2)*Cl_wing

   (49) Lift_stab = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (50) Lift_stab = 0.5*Density*S_stab*(x'^2+y'^2)*Cl_wing

   (51) Drag_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (52) Drag_wing = 0.5*Density*S_wing*(x'^2+y'^2)*Cl_wing

   (53) Drag_stab = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (54) Drag_stab = 0.5*Density*S_stab*(x'^2+y'^2)*Cl_wing

   (55) Constant r = 2 m
   (56) Constant h = 10 m
   (57) %   Mass and inertia properties.
   (58) Plane.SetMass( mPlane = 2300 lbm)
   (59) Pilot.SetMass( mPilot = 100 lbm)
   (60) Plane.SetInertia( Planecm,  IPlanexx = (mPlane*(3*r^2+h^2)/12),  IPlaneyy = (mPlane*(3*r^2+h^2)/12) ,  IPlanezz = 0.5*mPlane*r^2 ) %What approximations should we make?
-> (61) IPlanexx = 0.08333333*mPlane*(h^2+3*r^2)
-> (62) IPlaneyy = 0.08333333*mPlane*(h^2+3*r^2)
-> (63) IPlanezz = 0.5*mPlane*r^2

   (64) %   Add relevant contact/distance forces.
   (65) System.AddForceGravity( -g*Ny> )            % Add's gravity force to each massive object.
-> (66) Force_Pilot> = -mPilot*g*Ny>
-> (67) Force_Planecm> = -mPlane*g*Ny>

   (68) wing.AddForce(Lift_wing*Planey>)
-> (69) Force_wing> = Lift_wing*Planey>

   (70) stab.AddForce(Lift_stab*Planey>) %replace Planey> with vector normal to stabilizer
-> (71) Force_stab> = Lift_stab*Planey>

   (72) wing.Addforce(Drag_wing*Planex>)
-> (73) Force_wing> = Drag_wing*Planex> + Lift_wing*Planey>

   (74) stab.Addforce(Drag_stab*Planex>) %replace Planex> with stabilizer direction vector
-> (75) Force_stab> = Drag_stab*Planex> + Lift_stab*Planey>

   (76) Planecm.AddForce(Thrust*Planex>)
-> (77) Force_Planecm> = -mPlane*g*Ny> + Thrust*Planex>

   (78) Dynamics[1] = Dot(  Plane.GetDynamics(),  Nx>  )
-> (79) Dynamics[1] = sin(alpha0)*(Lift_stab+Lift_wing) + mPlane*x'' - cos(alp
        ha0)*(Thrust+Drag_stab+Drag_wing)

   (80) Dynamics[2] = Dot(  Plane.GetDynamics(),  Ny>  )
-> (81) Dynamics[2] = mPlane*(g+y'') - cos(alpha0)*(Lift_stab+Lift_wing) - sin(
        alpha0)*(Thrust+Drag_stab+Drag_wing)

   (82) Solve(Dynamics, x'', y'')
-> (83) x'' = -(sin(alpha0)*(Lift_stab+Lift_wing)-cos(alpha0)*(Thrust+Drag_stab
        +Drag_wing))/mPlane
-> (84) y'' = (cos(alpha0)*(Lift_stab+Lift_wing)+sin(alpha0)*(Thrust+Drag_stab+
        Drag_wing))/mPlane - g

   (85) Input x=0 m, y=1000 m, x'=50 m/s, y'=0, tfinal = 100
   (86) Output      t sec,  x m, y m
   (87) OutputPlot  x m, y m
   (88) 
