   (1) % MotionGenesis file:  Main.txt
   (2) %--------------------------------------------------------------------
   (3) %   Physical objects.
   (4) NewtonianFrame  N                                   % The atmosphere
   (5) RigidBody       Plane                               % Where Z is the longitudinal axis
   (6) RigidFrame      Stab
   (7) Particle        Pilot                               % 
   (8) Point           wing( Plane )           % Center of lift on the left wing
   (9) Point           stabpoint( Plane )        % Center of lift on the horizontal stabilizer
   (10) %--------------------------------------------------------------------
   (11) %   Mathematical declarations.
   (12) Variable    x'', y''                            % The plane's positional coordinates and their derivatives
   (13) Variable    qa''                             % Main wing angle of attack
   (14) Constant    g = 9.80665 m/s^2                   % Earth's gravitational acceleration.
   (15) Constant    Density = 1.225 kg / m^3            % Standard atmosphere Density
   (16) Constant    Thrust  = 10000 N                   % Thrust from engine. Engine torque is neglected
   (17) Constant    x_wing = -1 m, y_wing = 0 m
   (18) Constant    x_stab = 1 m, y_stab = 0 m
   (19) Constant    S_wing= 10 m^2, S_stab= 10 m^2
   (20) Constant deflection = 0 degrees
   (21) Planecm.Translate(No, x*Nx> + y*Ny>)
-> (22) p_No_Planecm> = x*Nx> + y*Ny>
-> (23) v_Planecm_N> = x'*Nx> + y'*Ny>
-> (24) a_Planecm_N> = x''*Nx> + y''*Ny>

   (25) Plane.RotateZ(N, qa)
-> (26) Plane_N = [cos(qa), sin(qa), 0;  -sin(qa), cos(qa), 0;  0, 0, 1]
-> (27) w_Plane_N> = qa'*Planez>
-> (28) alf_Plane_N> = qa''*Planez>

   (29) %Stabo.SetPosition(Planecm, x_stab*Planex> + y_stab*Planey>)
   (30) stabpoint.Translate(Planecm, x_stab*Planex> + y_stab*Planey>)
-> (31) p_Planecm_stabpoint> = x_stab*Planex> + y_stab*Planey>
-> (32) v_stabpoint_N> = x'*Nx> + y'*Ny> - y_stab*qa'*Planex> + x_stab*qa'*Planey>
-> (33) a_stabpoint_N> = x''*Nx> + y''*Ny> + (-x_stab*qa'^2-y_stab*qa'')*Planex>
        + (x_stab*qa''-y_stab*qa'^2)*Planey>

   (34) Stab.RotateZ(Plane, deflection)
-> (35) Stab_Plane = [cos(deflection), sin(deflection), 0;  -sin(deflection), 
        cos(deflection), 0;  0, 0, 1]
-> (36) w_Stab_Plane> = 0>
-> (37) w_Stab_N> = qa'*Planez>
-> (38) alf_Stab_Plane> = 0>
-> (39) alf_Stab_N> = qa''*Planez>

   (40) %Stab.SetAngularVelocity(Plane, 0>)
   (41) wing.Translate(Planecm, x_wing*Planex> + y_wing*Planey>)
-> (42) p_Planecm_wing> = x_wing*Planex> + y_wing*Planey>
-> (43) v_wing_N> = x'*Nx> + y'*Ny> - y_wing*qa'*Planex> + x_wing*qa'*Planey>
-> (44) a_wing_N> = x''*Nx> + y''*Ny> + (-x_wing*qa'^2-y_wing*qa'')*Planex>
        + (x_wing*qa''-y_wing*qa'^2)*Planey>

   (45) %stab.SetPosition(Planeo,  x_stab*Planex> + y_stab*Planey>)
   (46) %theta=GetAngleBetweenVectorsDegrees(Planex>, Ny>) %Used to define the sign of alpha
   (47) %alpha= (IsNegative(90-theta)*(-1)+IsPositive(90-theta)) * GetAngleBetweenVectors(Planex>, Planecm.Getvelocity(N))
   (48) alpha=GetAngleBetweenVectors(Planecm.Getvelocity(N), Planex>, Nz>)
-> (49) alpha = sign0IsPositive1(sin(qa)*x'-cos(qa)*y')*acos((sin(qa)*y'+cos(
        qa)*x')/sqrt(x'^2+y'^2))

   (50) alpha_stab= alpha + deflection
-> (51) alpha_stab = deflection + alpha

   (52) %====================================
   (53) %Redefine from Xfoil polars
   (54) Cl_wing= IsPositive(50-alpha)*2*sin(alpha)*cos(alpha) + 0.2 %From Morris
-> (55) Cl_wing = 0.2 + 2*sin(alpha)*cos(alpha)*IsPositive(50-alpha)

   (56) Cl_stab= IsPositive(50-alpha)*2*sin(alpha_stab)*cos(alpha_stab) + 0.2 %From Morris
-> (57) Cl_stab = 0.2 + 2*sin(alpha_stab)*cos(alpha_stab)*IsPositive(50-alpha)

   (58) %Cl_wing = IsPositive(50-alpha)*()*(alpha - 4)
   (59) %Cl_stab = IsPositive(50-alpha)*0.2*(alpha_stab - 4)
   (60) %Cl_wing= abs(2*sin(alpha)*cos(alpha)) %From Morris
   (61) %Cl_stab= abs(2*sin(alpha_stab)*cos(alpha_stab)) %From Morris
   (62) Cd_wing = 2*sin(alpha)^2 %From Morris
-> (63) Cd_wing = 2*sin(alpha)^2

   (64) Cd_stab = 2*sin(alpha_stab)^2 %From Morris
-> (65) Cd_stab = 2*sin(alpha_stab)^2

   (66) %===========================================
   (67) Lift_wing = 0.5*Density*Cl_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (68) Lift_wing = 0.5*Density*S_wing*(x'^2+y'^2)*Cl_wing

   (69) Lift_stab = 0.5*Density*Cl_stab*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (70) Lift_stab = 0.5*Density*S_stab*(x'^2+y'^2)*Cl_stab

   (71) Drag_wing = 0.5*Density*Cd_wing*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_wing
-> (72) Drag_wing = 0.5*Density*S_wing*(x'^2+y'^2)*Cd_wing

   (73) Drag_stab = 0.5*Density*Cd_stab*Dot(Planecm.GetVelocity(N), Planecm.GetVelocity(N))*S_stab
-> (74) Drag_stab = 0.5*Density*S_stab*(x'^2+y'^2)*Cd_stab

   (75) %   Mass and inertia properties.
   (76) Constant r = 2 m
   (77) Constant h = 10 m
   (78) Plane.SetMass( mPlane = 2300 lbm)
   (79) Pilot.SetMass( mPilot = 100 lbm)
   (80) Plane.SetInertia( Planecm,  IPlanexx = (mPlane*(3*r^2+h^2)/12),  IPlaneyy = (mPlane*(3*r^2+h^2)/12) ,  IPlanezz = 0.5*mPlane*r^2 ) %What approximations should we make?
-> (81) IPlanexx = 0.08333333*mPlane*(h^2+3*r^2)
-> (82) IPlaneyy = 0.08333333*mPlane*(h^2+3*r^2)
-> (83) IPlanezz = 0.5*mPlane*r^2

   (84) %   Add relevant contact/distance forces.
   (85) System.AddForceGravity( -g*Ny> )            % Adds gravity force to each massive object.
-> (86) Force_Pilot> = -mPilot*g*Ny>
-> (87) Force_Planecm> = -mPlane*g*Ny>

   (88) %Lift
   (89) wing.AddForce(Lift_wing*Planey>)
-> (90) Force_wing> = Lift_wing*Planey>

   (91) stabpoint.AddForce(Lift_stab*Planey>)
-> (92) Force_stabpoint> = Lift_stab*Planey>

   (93) %Drag
   (94) %wing.Addforce(-Drag_wing*Planex>)
   (95) %Stabo.Addforce(-Drag_stab*Stabx>) -GetUnitvector(Planecm.GetVelocity(N))
   (96) wing.Addforce(-Drag_wing*GetUnitvector(Planecm.GetVelocity(N)))
-> (97) Force_wing> = -x'*Drag_wing/sqrt(x'^2+y'^2)*Nx> - y'*Drag_wing/sqrt(x'^2
        +y'^2)*Ny> + Lift_wing*Planey>

   (98) stabpoint.Addforce(-Drag_stab*GetUnitvector(Planecm.GetVelocity(N)))
-> (99) Force_stabpoint> = -x'*Drag_stab/sqrt(x'^2+y'^2)*Nx> - y'*Drag_stab/sq
        rt(x'^2+y'^2)*Ny> + Lift_stab*Planey>

   (100) %Thrust
   (101) Planecm.AddForce(Thrust*Planex>)
-> (102) Force_Planecm> = -mPlane*g*Ny> + Thrust*Planex>

   (103) Dynamics[1] = Dot(  Plane.GetDynamics(),  Nx>  )
-> (104) Dynamics[1] = sin(qa)*(Lift_stab+Lift_wing) + x'*(Drag_stab+Drag_wing)
         /sqrt(x'^2+y'^2) + mPlane*x'' - Thrust*cos(qa)

   (105) Dynamics[2] = Dot(  Plane.GetDynamics(),  Ny>  )
-> (106) Dynamics[2] = mPlane*g + y'*(Drag_stab+Drag_wing)/sqrt(x'^2+y'^2)
         + mPlane*y'' - Thrust*sin(qa) - cos(qa)*(Lift_stab+Lift_wing)

   (107) Dynamics[3] = Dot(  Plane.GetDynamics( Planecm ),  Nz>  )
-> (108) Dynamics[3] = (x_stab*cos(qa)*y'*Drag_stab+x_wing*cos(qa)*y'*Drag_wing
         -x_stab*sin(qa)*x'*Drag_stab-x_wing*sin(qa)*x'*Drag_wing-y_stab*sin(
         qa)*y'*Drag_stab-y_stab*cos(qa)*x'*Drag_stab-y_wing*sin(qa)*y'*Drag_w
         ing-y_wing*cos(qa)*x'*Drag_wing)/sqrt(x'^2+y'^2) + IPlanezz*qa''
         - x_stab*Lift_stab - x_wing*Lift_wing

   (109) Solve(Dynamics, x'', y'', qa'')
-> (110) x'' = (Thrust*cos(qa)-sin(qa)*(Lift_stab+Lift_wing)-x'*(Drag_stab+Dra
         g_wing)/sqrt(x'^2+y'^2))/mPlane

-> (111) y'' = (Thrust*sin(qa)+cos(qa)*(Lift_stab+Lift_wing)-y'*(Drag_stab+Dra
         g_wing)/sqrt(x'^2+y'^2))/mPlane - g

-> (112) qa'' = (x_stab*Lift_stab+x_wing*Lift_wing-(x_stab*cos(qa)*y'*Drag_stab
         +x_wing*cos(qa)*y'*Drag_wing-x_stab*sin(qa)*x'*Drag_stab-x_wing*sin(
         qa)*x'*Drag_wing-y_stab*sin(qa)*y'*Drag_stab-y_stab*cos(qa)*x'*Drag_s
         tab-y_wing*sin(qa)*y'*Drag_wing-y_wing*cos(qa)*x'*Drag_wing)/sqrt(x'^2
         +y'^2))/IPlanezz

   (113) stab_w = getmagnitude(Stab.getangularvelocity(Plane)) %check that it is 0
-> (114) stab_w = 0

   (115) Input qa = 0 degrees, qa'=0
   (116) Input x=0 m, y=1000 m, x'= 100 m/s, y'=0 m/s, tfinal = 10, tstep= 0.02 sec
   (117) Output      t sec,  x m, y m, qa degrees, alpha degrees, stab_w degrees/sec
   (118) OutputPlot  x m, y m
   (119) OutputPlot  t sec, alpha degrees, alpha_stab degrees
   (120) ODE()

   (121) %Save MGplane.html
   (122) 
